type Query {
    hello: String!
    getPerson(name: String, age: Int): String
    getInt: Int
    getFloat(num: Float): Float!
    getString: String
    getBoolean: Boolean
    getID: ID
    getNums(numbers: [Int!]!): [Int]
    # products, utilizando nomenclatura tipo graphql
    product(id: ID!): Product
    products: [Product!]!
}

type Mutation {
    login(email: EmailAddress!, password: String!): AuthResponse
    addProduct(dto: CreateProductDto!): Product
    updateProduct(id: ID!, dto: UpdateProductDto!): Product
    deleteProduct(id: ID!): ID
    addCategory(dto: CreateCategoryDto!): Category
}

type Product {
    id: ID!
    name: String!
    price: Float!
    description: String!
    image: String!
    createdAt: String!
    categoryId: ID!
    category: Category!
} 

input CreateProductDto {
    name: String!
    price: Int!
    description: String!
    image: String!,
    categoryId: ID!
}

input UpdateProductDto {
    name: String,
    price: Int,
    description: String,
    image: String,
    categoryId: ID
}

type Category { 
    id: ID!
    name: String!
    image: String!
}

type AuthResponse {
    access_token: String!,
    user: User
}

type User {
    id: ID!
    email: String!
    role: String!
    createdAt: String!
}

input CreateCategoryDto {
    name: CategoryNameType!
    image: URL!
}

scalar CategoryNameType